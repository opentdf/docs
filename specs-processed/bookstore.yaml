openapi: 3.0.0
servers:
  - url: https://api.examplebookstore.com/v1
    description: Production server
  - url: https://sandbox.api.examplebookstore.com/v1
    description: Sandbox server
  - url: http://localhost:4010
    description: Local development mock server
info:
  title: Bookstore API
  version: 1.0.0
  description: |
    Welcome to the Bookstore API. This API provides access to a rich collection of books, author details, and genre classifications.
    You can use this API to browse our catalog, search for specific titles, and manage book-related data.

    ## Key Features:
    *   Access detailed information about books, including titles, ISBNs, authors, and genres.
    *   Manage author profiles and their literary works.
    *   Explore books categorized by various genres.

    This specification is written in OpenAPI 3.0.0 format.
  contact:
    name: Bookstore API Support
    email: support@examplebookstore.com
    url: https://developer.examplebookstore.com/support
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://examplebookstore.com/assets/logo.png"
    altText: "Bookstore Logo"
tags:
  - name: Books
    description: Operations related to books in the catalog.
    x-displayName: Books
  - name: Authors
    description: Operations related to book authors.
    x-displayName: Authors
  - name: Genres
    description: Operations related to book genres.
    x-displayName: Genres
  - name: Schema-Book
    x-displayName: Book Schema
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Book" />
  - name: Schema-Author
    x-displayName: Author Schema
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Author" />
  - name: Schema-Genre
    x-displayName: Genre Schema
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Genre" />
x-tagGroups:
  - name: Core Resources
    tags:
      - Books
      - Authors
      - Genres
  - name: Data Models
    tags:
      - Schema-Book
      - Schema-Author
      - Schema-Genre
paths:
  /books:
    get:
      tags:
        - Books
      summary: List all books
      description: Retrieves a paginated list of all books in the catalog. Supports filtering by genre and author.
      operationId: listBooks
      parameters:
        - name: limit
          in: query
          description: Maximum number of books to return.
          required: false
          schema:
            type: integer
            format: int32
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of books to skip for pagination.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: genreId
          in: query
          description: Filter books by a specific genre ID.
          required: false
          schema:
            type: string
            format: uuid
        - name: authorId
          in: query
          description: Filter books by a specific author ID.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Books
      summary: Add a new book
      description: Adds a new book to the catalog.
      operationId: createBook
      requestBody:
        description: Book object to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookInput"
      responses:
        "201":
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input data for the book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: A book with the same ISBN already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/books/{bookId}":
    parameters:
      - name: bookId
        in: path
        required: true
        description: Unique identifier of the book.
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Books
      summary: Get book by ID
      description: Retrieves detailed information for a specific book.
      operationId: getBookById
      responses:
        "200":
          description: Detailed information about the book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Books
      summary: Update an existing book
      description: Updates the information for an existing book.
      operationId: updateBook
      requestBody:
        description: Book object with updated information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookInput"
      responses:
        "200":
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input data for the book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Books
      summary: Delete a book
      description: Removes a book from the catalog.
      operationId: deleteBook
      responses:
        "204":
          description: Book deleted successfully.
        "404":
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /authors:
    get:
      tags:
        - Authors
      summary: List all authors
      description: Retrieves a list of all authors.
      operationId: listAuthors
      parameters:
        - name: limit
          in: query
          description: Maximum number of authors to return.
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: offset
          in: query
          description: Number of authors to skip for pagination.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        "200":
          description: A list of authors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      tags:
        - Authors
      summary: Add a new author
      description: Adds a new author to the system.
      operationId: createAuthor
      requestBody:
        description: Author object to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorInput"
      responses:
        "201":
          description: Author created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "400":
          description: Invalid input data for the author.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/authors/{authorId}":
    parameters:
      - name: authorId
        in: path
        required: true
        description: Unique identifier of the author.
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Authors
      summary: Get author by ID
      description: Retrieves detailed information for a specific author.
      operationId: getAuthorById
      responses:
        "200":
          description: Detailed information about the author.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "404":
          description: Author not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Authors
      summary: Update an existing author
      description: Updates the information for an existing author.
      operationId: updateAuthor
      requestBody:
        description: Author object with updated information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorInput"
      responses:
        "200":
          description: Author updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "400":
          description: Invalid input data for the author.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Author not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Authors
      summary: Delete an author
      description: Removes an author from the system. Associated books may need to be handled or re-assigned.
      operationId: deleteAuthor
      responses:
        "204":
          description: Author deleted successfully.
        "404":
          description: Author not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /genres:
    get:
      tags:
        - Genres
      summary: List all genres
      description: Retrieves a list of all book genres.
      operationId: listGenres
      responses:
        "200":
          description: A list of genres.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Genre"
    post:
      tags:
        - Genres
      summary: Add a new genre
      description: Adds a new genre to the system.
      operationId: createGenre
      requestBody:
        description: Genre object to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenreInput"
      responses:
        "201":
          description: Genre created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          description: Invalid input data for the genre.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: A genre with the same name already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/genres/{genreId}":
    parameters:
      - name: genreId
        in: path
        required: true
        description: Unique identifier of the genre.
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Genres
      summary: Get genre by ID
      description: Retrieves detailed information for a specific genre.
      operationId: getGenreById
      responses:
        "200":
          description: Detailed information about the genre.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        "404":
          description: Genre not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Genres
      summary: Update an existing genre
      description: Updates the information for an existing genre.
      operationId: updateGenre
      requestBody:
        description: Genre object with updated information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenreInput"
      responses:
        "200":
          description: Genre updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          description: Invalid input data for the genre.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Genre not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Genres
      summary: Delete a genre
      description: Removes a genre from the system.
      operationId: deleteGenre
      responses:
        "204":
          description: Genre deleted successfully.
        "404":
          description: Genre not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Book:
      type: object
      required:
        - id
        - title
        - isbn
        - authorIds
        - genreIds
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the book.
          readOnly: true
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        title:
          type: string
          description: The title of the book.
          example: "The Great Novel"
        isbn:
          type: string
          description: International Standard Book Number.
          example: "978-3-16-148410-0"
        publicationDate:
          type: string
          format: date
          description: The date the book was published.
          example: "2023-05-15"
        description:
          type: string
          description: A short summary or description of the book.
          example: "An epic tale of adventure and discovery."
        coverImageUrl:
          type: string
          format: url
          description: URL to the book's cover image.
          example: "https://examplebookstore.com/covers/great-novel.jpg"
        authorIds:
          type: array
          description: List of author IDs associated with this book.
          items:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        genreIds:
          type: array
          description: List of genre IDs this book belongs to.
          items:
            type: string
            format: uuid
            example: "f0e1d2c3-b4a5-6789-0123-456789abcdef"
    BookInput:
      type: object
      required:
        - title
        - isbn
        - authorIds
        - genreIds
      properties:
        title:
          type: string
          description: The title of the book.
          example: "The Great Novel"
        isbn:
          type: string
          description: International Standard Book Number.
          example: "978-3-16-148410-0"
        publicationDate:
          type: string
          format: date
          description: The date the book was published.
          example: "2023-05-15"
        description:
          type: string
          description: A short summary or description of the book.
          example: "An epic tale of adventure and discovery."
        coverImageUrl:
          type: string
          format: url
          description: URL to the book's cover image.
          example: "https://examplebookstore.com/covers/great-novel.jpg"
        authorIds:
          type: array
          description: List of author IDs associated with this book.
          items:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        genreIds:
          type: array
          description: List of genre IDs this book belongs to.
          items:
            type: string
            format: uuid
            example: "f0e1d2c3-b4a5-6789-0123-456789abcdef"
    Author:
      type: object
      required:
        - id
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the author.
          readOnly: true
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        firstName:
          type: string
          description: Author's first name.
          example: "Jane"
        lastName:
          type: string
          description: Author's last name.
          example: "Doe"
        biography:
          type: string
          description: A short biography of the author.
          example: "Jane Doe is a renowned author of contemporary fiction."
        birthDate:
          type: string
          format: date
          description: Author's date of birth.
          example: "1980-01-20"
    AuthorInput:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          description: Author's first name.
          example: "Jane"
        lastName:
          type: string
          description: Author's last name.
          example: "Doe"
        biography:
          type: string
          description: A short biography of the author.
          example: "Jane Doe is a renowned author of contemporary fiction."
        birthDate:
          type: string
          format: date
          description: Author's date of birth.
          example: "1980-01-20"
    Genre:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the genre.
          readOnly: true
          example: "f0e1d2c3-b4a5-6789-0123-456789abcdef"
        name:
          type: string
          description: The name of the genre.
          example: "Science Fiction"
        description:
          type: string
          description: A brief description of the genre.
          example: "Literature that explores imaginative concepts based on scientific or technological advancements."
    GenreInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the genre.
          example: "Science Fiction"
        description:
          type: string
          description: A brief description of the genre.
          example: "Literature that explores imaginative concepts based on scientific or technological advancements."
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: An error code.
          example: "NOT_FOUND"
        message:
          type: string
          description: A human-readable error message.
          example: "The requested resource was not found."
        details:
          type: object
          additionalProperties: true
          description: Additional details about the error.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      description: API key for authentication. Use `test-api-key` for testing purposes.
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token for authentication using JWT.
    OAuth2Flow:
      type: oauth2
      description: OAuth2 authentication for accessing protected resources.
      flows:
        authorizationCode:
          authorizationUrl: https://auth.examplebookstore.com/oauth/authorize
          tokenUrl: https://auth.examplebookstore.com/oauth/token
          scopes:
            "books:read": Read access to books
            "books:write": Write access to books
            "authors:read": Read access to authors
            "authors:write": Write access to authors
            "genres:read": Read access to genres
            "genres:write": Write access to genres
security:
  - ApiKeyAuth: []
  - BearerAuth: []
  - OAuth2Flow:
      - "books:read"
      - "authors:read"
      - "genres:read"